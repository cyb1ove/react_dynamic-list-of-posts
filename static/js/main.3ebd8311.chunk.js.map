{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","api/post.ts","App.tsx","index.tsx"],"names":["PostsList","posts","onSelect","useState","selectedPostId","setSelectedPostId","isPostSelected","postId","className","map","post","userId","title","type","classNames","id","onClick","resetSelectedPost","NewCommentForm","onAdd","nameQuery","setNameQuery","emailQuery","setEmailQuery","commentQuery","setCommentQuery","name","value","placeholder","onChange","event","target","BASE_URL","request","url","options","console","log","fetch","then","response","ok","Error","status","statusText","json","deleteCommentFromServer","method","addCommentToServer","addRequest","headers","body","JSON","stringify","PostDetails","comments","setComments","change","setChange","isCommentsHiden","setIsCommentsHiden","commentId","a","email","useEffect","tempComments","length","condition","comment","deleteComment","getUserPosts","App","setPosts","selectedPost","setSelectedPost","selectedUser","setSelectedUser","selectedPosts","setSelectedPosts","loadedPosts","loadPosts","Number","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ebd8311.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './PostsList.scss';\nimport { Post } from '../../types/types';\n\ntype Props = {\n  posts: Post[];\n  onSelect: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onSelect }) => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const isPostSelected = (postId: number) => {\n    return selectedPostId === postId;\n  };\n\n  const resetSelectedPost = (post: Post) => {\n    if (selectedPostId === post.id) {\n      setSelectedPostId(0);\n      onSelect(null);\n    } else {\n      setSelectedPostId(post.id);\n      onSelect(post);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => {\n          return (\n            <li key={post.id} className=\"PostsList__item\">\n              <div>\n                <b>{`User ID #${post.userId}: `}</b>\n                {post.title}\n              </div>\n\n              <button\n                type=\"button\"\n                className={classNames(\n                  'PostsList__button',\n                  'button',\n                  { 'button--active': isPostSelected(post.id) },\n                )}\n                onClick={() => resetSelectedPost(post)}\n              >\n                {isPostSelected(post.id) ? 'Close' : 'Open'}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onAdd: (name: string, email: string, comment: string) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAdd }) => {\n  const [nameQuery, setNameQuery] = useState('');\n  const [emailQuery, setEmailQuery] = useState('');\n  const [commentQuery, setCommentQuery] = useState('');\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={nameQuery}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setNameQuery(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={emailQuery}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setEmailQuery(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={commentQuery}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setCommentQuery(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => {\n          onAdd(\n            nameQuery,\n            emailQuery,\n            commentQuery,\n          );\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { FetchOptions } from '../types/types';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options?: FetchOptions) => {\n  // eslint-disable-next-line no-console\n  console.log(`${BASE_URL}${url}`);\n\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import { AddRequest, Comment } from '../types/types';\nimport { request } from './api';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteCommentFromServer = (id: number): Promise<void> => {\n  return request(`/comments/${id}`, { method: 'DELETE' });\n};\n\nexport const addCommentToServer = (addRequest: AddRequest) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(addRequest),\n  });\n};\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport classNames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostComments, deleteCommentFromServer, addCommentToServer } from '../../api/comments';\nimport { Post, Comment } from '../../types/types';\n\ntype Props = {\n  post: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [change, setChange] = useState(false);\n  const [isCommentsHiden, setIsCommentsHiden] = useState(false);\n\n  async function deleteComment(commentId: number) {\n    await deleteCommentFromServer(commentId);\n    setChange((change) => !change);\n  }\n\n  async function addComment(name: string, email: string, body: string): Promise<void> {\n    if (post) {\n      const request = {\n        postId: post.id,\n        name,\n        email,\n        body,\n      };\n\n      const a = await addCommentToServer(request);\n\n      // eslint-disable-next-line no-console\n      console.log(a);\n      setChange((change) => !change);\n    }\n  }\n\n  useEffect(() => {\n    (async function loadinsComments() {\n      if (post) {\n        const tempComments = await getPostComments(post.id);\n\n        if (tempComments) {\n          setComments(tempComments);\n        }\n      }\n\n      // eslint-disable-next-line no-console\n      console.log(comments);\n    }());\n  }, [post, change]);\n\n  return post && (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {!!comments.length && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'button',\n              { 'button--active': isCommentsHiden },\n            )}\n            onClick={() => setIsCommentsHiden(condition => !condition)}\n          >\n            {isCommentsHiden ? 'Show' : `Hide ${comments.length} comments`}\n          </button>\n        )}\n\n        <ul\n          className={classNames(\n            'PostDetails__list',\n            { 'PostDetails__list--hidden': isCommentsHiden },\n          )}\n        >\n          {comments.map(comment => {\n            return (\n              <li className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onAdd={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { Post } from '../types/types';\nimport { request } from './api';\n\nexport const getUserPosts = (userId?: number): Promise<Post[]> => {\n  if (!userId) {\n    return request('/posts');\n  }\n\n  return request(`/posts?userId=${userId}`);\n};\n","/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/types';\nimport { getUserPosts } from './api/post';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPosts, setSelectedPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    async function loadPosts() {\n      const loadedPosts = await getUserPosts();\n\n      setPosts(loadedPosts);\n      setSelectedPosts(loadedPosts);\n    }\n\n    loadPosts();\n  }, []);\n\n  function selectUser(value: string) {\n    setSelectedUser(Number(value));\n\n    if (!Number(value)) {\n      setSelectedPosts(posts);\n    } else {\n      setSelectedPosts(posts.filter(post => post.userId === Number(value)));\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={(event) => selectUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList posts={selectedPosts} onSelect={setSelectedPost} />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            post={selectedPost}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}